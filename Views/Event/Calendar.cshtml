@* Views/Event/Calendar.cshtml *@
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using GreenMeadowsPortal.ViewModels
@using GreenMeadowsPortal.Models
@model EventCalendarViewModel

@{
    ViewData["Title"] = "Event Calendar";
    Layout = "~/Views/Shared/_PortalLayout.cshtml";
}

<div class="page-header">
    <div class="page-title">
        <h1><i class="fas fa-calendar"></i> Event Calendar</h1>
        <nav class="breadcrumb">
            <a asp-controller="Dashboard" asp-action="@(Model.Role == "Admin" ? "AdminDashboard" : (Model.Role == "Staff" ? "StaffDashboard" : "HomeownerDashboard"))">Dashboard</a>
            <span>/</span>
            <span>Events</span>
            <span>/</span>
            <span>Calendar</span>
        </nav>
    </div>
    <div class="page-actions">
        @if (Model.CanCreateEvents)
        {
            <a asp-action="Create" class="btn btn-primary">
                <i class="fas fa-plus"></i> Add Event
            </a>
        }
        <a asp-action="Index" class="btn btn-secondary">
            <i class="fas fa-list"></i> List View
        </a>
    </div>
</div>

<!-- Calendar Navigation -->
<div class="calendar-navigation">
    <div class="calendar-controls">
        <a href="@Url.Action("Calendar", new { year = Model.CurrentMonth.AddMonths(-1).Year, month = Model.CurrentMonth.AddMonths(-1).Month })" class="btn btn-icon">
            <i class="fas fa-chevron-left"></i>
        </a>
        <h2 class="current-month">@Model.CurrentMonth.ToString("MMMM yyyy")</h2>
        <a href="@Url.Action("Calendar", new { year = Model.CurrentMonth.AddMonths(1).Year, month = Model.CurrentMonth.AddMonths(1).Month })" class="btn btn-icon">
            <i class="fas fa-chevron-right"></i>
        </a>
    </div>
    <div class="calendar-filters">
        <select class="form-select" onchange="filterCalendarEvents(this.value)">
            <option value="all">All Categories</option>
            <option value="community">Community</option>
            <option value="maintenance">Maintenance</option>
            <option value="recreation">Recreation</option>
            <option value="meeting">Meeting</option>
            <option value="social">Social</option>
            <option value="holiday">Holiday</option>
        </select>
    </div>
</div>

<!-- Calendar Grid -->
<div class="calendar-grid">
    <div class="calendar-header">
        <div class="calendar-day-header">Sun</div>
        <div class="calendar-day-header">Mon</div>
        <div class="calendar-day-header">Tue</div>
        <div class="calendar-day-header">Wed</div>
        <div class="calendar-day-header">Thu</div>
        <div class="calendar-day-header">Fri</div>
        <div class="calendar-day-header">Sat</div>
    </div>

    <div class="calendar-body">
        @{
            // Calculate first day of the month and days in month
            var firstDay = new DateTime(Model.CurrentMonth.Year, Model.CurrentMonth.Month, 1);
            var firstDayOfWeek = (int)firstDay.DayOfWeek;
            var daysInMonth = DateTime.DaysInMonth(Model.CurrentMonth.Year, Model.CurrentMonth.Month);
            var today = DateTime.Today;

            // Generate calendar cells
            int cellCount = 0;

            // Previous month filler cells
            var prevMonth = firstDay.AddMonths(-1);
            var daysInPrevMonth = DateTime.DaysInMonth(prevMonth.Year, prevMonth.Month);
            for (int i = firstDayOfWeek - 1; i >= 0; i--)
            {
                <div class="calendar-cell other-month">
                    <div class="cell-date">@(daysInPrevMonth - i)</div>
                </div>
                cellCount++;
            }

            // Current month cells
            for (int day = 1; day <= daysInMonth; day++)
            {
                var currentDate = new DateTime(Model.CurrentMonth.Year, Model.CurrentMonth.Month, day);
                var isToday = currentDate == today;
                var dayEvents = Model.CalendarDays.ContainsKey(day) ? Model.CalendarDays[day] : new List<EventViewModel>();

                <div class="calendar-cell @(isToday ? "today" : "")">
                    <div class="cell-date">@day</div>
                    @if (dayEvents.Any())
                    {
                        <div class="cell-events">
                            @foreach (var evt in dayEvents.Take(3))
                            {
                                <div class="calendar-event event-@evt.EventTypeEnum.ToString().ToLower()"
                                     data-category="@evt.Category.ToLower()"
                                     data-event-id="@evt.Id">
                                    <a asp-action="Details" asp-route-id="@evt.Id" class="event-link">
                                        <span class="event-time">@evt.EventTimeFormatted</span>
                                        <span class="event-title">@evt.Title</span>
                                    </a>
                                </div>
                            }
                            @if (dayEvents.Count > 3)
                            {
                                <div class="more-events">+@(dayEvents.Count - 3) more</div>
                            }
                        </div>
                    }
                </div>
                cellCount++;
            }

            // Next month filler cells to complete the grid
            var nextMonthDays = 42 - cellCount; // 6 weeks x 7 days = 42 cells
            for (int day = 1; day <= nextMonthDays; day++)
            {
                <div class="calendar-cell other-month">
                    <div class="cell-date">@day</div>
                </div>
            }
        }
    </div>
</div>

<!-- Event Legend -->
<div class="calendar-legend">
    <div class="legend-section">
        <h3>Event Types</h3>
        <div class="legend-items">
            @foreach (EventType type in Enum.GetValues<EventType>())
            {
                <div class="legend-item">
                    <div class="legend-color event-@type.ToString().ToLower()"></div>
                    <span>@type</span>
                </div>
            }
        </div>
    </div>
</div>

<!-- Selected Day Details (Modal) -->
<div id="dayDetailsModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 id="selectedDateTitle">Events for [Date]</h3>
            <span class="close">&times;</span>
        </div>
        <div class="modal-body" id="dayEventsContainer">
            <!-- Day events will be populated here via JavaScript -->
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/events.css">
    <link rel="stylesheet" href="~/css/calendar.css">
}

@section Scripts {
    <script>
        function filterCalendarEvents(category) {
            const events = document.querySelectorAll('.calendar-event');
            events.forEach(event => {
                const eventCell = event.closest('.calendar-cell');
                if (category === 'all' || event.dataset.category === category) {
                    event.style.display = 'block';
                } else {
                    event.style.display = 'none';
                }

                // Check if cell has any visible events
                const visibleEvents = eventCell.querySelectorAll('.calendar-event[style="display: block;"], .calendar-event:not([style])');
                const moreEvents = eventCell.querySelector('.more-events');

                if (visibleEvents.length === 0 && moreEvents) {
                    moreEvents.style.display = 'none';
                } else if (visibleEvents.length > 0 && moreEvents) {
                    moreEvents.style.display = 'block';
                }
            });
        }

        // Calendar cell click handling
        document.addEventListener('DOMContentLoaded', function() {
            const calendarCells = document.querySelectorAll('.calendar-cell:not(.other-month)');
            const modal = document.getElementById('dayDetailsModal');
            const modalTitle = document.getElementById('selectedDateTitle');
            const modalBody = document.getElementById('dayEventsContainer');
            const closeBtn = modal.querySelector('.close');

            calendarCells.forEach(cell => {
                cell.addEventListener('click', function(e) {
                    // Don't open modal if clicking on an event link
                    if (e.target.closest('.event-link')) {
                        return;
                    }

                    const date = cell.querySelector('.cell-date').textContent;
                    const monthYear = '@Model.CurrentMonth.ToString("MMMM yyyy")';
                    modalTitle.textContent = `Events for ${monthYear} ${date}`;

                    // Get events for this day
                    const events = cell.querySelectorAll('.calendar-event');

                    if (events.length === 0) {
                        modalBody.innerHTML = '<p class="no-events">No events scheduled for this day.</p>';
                    } else {
                        modalBody.innerHTML = '';
                        events.forEach(event => {
                            const eventId = event.dataset.eventId;
                            const eventData = event.innerHTML;
                            const eventDiv = document.createElement('div');
                            eventDiv.className = 'modal-event-item';
                            eventDiv.innerHTML = eventData;
                            modalBody.appendChild(eventDiv);
                        });
                    }

                    modal.style.display = 'block';
                });
            });

            // Close modal
            closeBtn.addEventListener('click', function() {
                modal.style.display = 'none';
            });

            window.addEventListener('click', function(e) {
                if (e.target === modal) {
                    modal.style.display = 'none';
                }
            });

            // Auto-hide alerts after 5 seconds
            setTimeout(function() {
                const alerts = document.querySelectorAll('.alert');
                alerts.forEach(alert => {
                    alert.style.display = 'none';
                });
            }, 5000);
        });
    </script>
}